openapi: 3.0.0
info:
  title: HannaCode API
  version: 1.0.0
  description: API documentation for HannaCode platform
servers:
  - url: http://localhost:5000/api/v1
    description: Development server
paths:
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered successfully

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /auth/logout:
    get:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful

  /auth/me:
    get:
      summary: Get current user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User details retrieved successfully

  /courses:
    get:
      summary: Get all courses
      tags: [Courses]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        '200':
          description: List of courses

    post:
      summary: Create a new course
      tags: [Courses]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - level
                - language
              properties:
                title:
                  type: string
                description:
                  type: string
                level:
                  type: string
                  enum: [beginner, intermediate, advanced]
                language:
                  type: string
                  enum: [javascript, python, java, csharp, ruby, go, rust, php, other]
      responses:
        '201':
          description: Course created successfully

  /courses/{id}:
    get:
      summary: Get course by ID
      tags: [Courses]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course details

    put:
      summary: Update course
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                level:
                  type: string
                  enum: [beginner, intermediate, advanced]
                language:
                  type: string
                  enum: [javascript, python, java, csharp, ruby, go, rust, php, other]
      responses:
        '200':
          description: Course updated successfully

    delete:
      summary: Delete course
      tags: [Courses]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course deleted successfully

  /lessons:
    get:
      summary: Get all lessons
      tags: [Lessons]
      parameters:
        - in: query
          name: course
          schema:
            type: string
          description: Course ID
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Items per page
      responses:
        '200':
          description: List of lessons

    post:
      summary: Create a new lesson
      tags: [Lessons]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - content
                - course
                - order
              properties:
                title:
                  type: string
                description:
                  type: string
                content:
                  type: string
                course:
                  type: string
                order:
                  type: integer
      responses:
        '201':
          description: Lesson created successfully

  /lessons/{id}:
    get:
      summary: Get lesson by ID
      tags: [Lessons]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lesson details

    put:
      summary: Update lesson
      tags: [Lessons]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                content:
                  type: string
                order:
                  type: integer
      responses:
        '200':
          description: Lesson updated successfully

    delete:
      summary: Delete lesson
      tags: [Lessons]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lesson deleted successfully

  /mentorship/mentors:
    get:
      summary: Get all mentors
      tags: [Mentorship]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of mentors

  /mentorship/book:
    post:
      summary: Book a mentorship session
      tags: [Mentorship]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mentorId
                - scheduledDate
                - topic
              properties:
                mentorId:
                  type: string
                scheduledDate:
                  type: string
                  format: date-time
                topic:
                  type: string
                description:
                  type: string
                sessionType:
                  type: string
                  enum: [one-time, package]
      responses:
        '201':
          description: Session booked successfully

  /mentorship/sessions:
    get:
      summary: Get user's mentorship sessions
      tags: [Mentorship]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of sessions

  /mentorship/sessions/{id}:
    get:
      summary: Get session details
      tags: [Mentorship]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session details

    post:
      summary: Cancel session
      tags: [Mentorship]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session canceled successfully

  /mentorship/sessions/{id}/complete:
    post:
      summary: Complete session
      tags: [Mentorship]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session completed successfully

  /mentorship/sessions/{id}/feedback:
    post:
      summary: Provide session feedback
      tags: [Mentorship]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        '200':
          description: Feedback submitted successfully

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, premium, admin]
        profileImage:
          type: string
        bio:
          type: string
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        description:
          type: string
        level:
          type: string
          enum: [beginner, intermediate, advanced]
        language:
          type: string
        duration:
          type: integer
        coverImage:
          type: string
        isPremium:
          type: boolean
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Lesson:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        description:
          type: string
        content:
          type: string
        videoUrl:
          type: string
        duration:
          type: integer
        order:
          type: integer
        course:
          type: string
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time

    MentorshipSession:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        mentorId:
          type: string
        status:
          type: string
          enum: [scheduled, completed, canceled]
        scheduledDate:
          type: string
          format: date-time
        duration:
          type: integer
        topic:
          type: string
        description:
          type: string
        feedback:
          type: object
          properties:
            rating:
              type: integer
            comment:
              type: string
            createdAt:
              type: string
              format: date-time
        createdAt:
          type: string
          format: date-time 